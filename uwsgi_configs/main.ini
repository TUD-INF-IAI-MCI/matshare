[uwsgi]

# Fail to start with unknown config keys
strict = true

plugins = python,router_cache,router_rewrite,router_uwsgi

# Add the master process to watch workers
master = true

# Serve to nginx
http-socket = :80

# Hot-reloading (for development purposes only)
if-env = MS_PY_AUTO_RELOAD
py-auto-reload = %(_)
endif =

# How many seconds to allow workers to take for shutdown, default is 60
if-env = MS_WORKER_RELOAD_MERCY
worker-reload-mercy = %(_)
endif =

# Trust the first X-Forwarded-For address added by nginx and overwrite REMOTE_ADDR
route-if = re:${HTTP_X_FORWARDED_FOR};^\s*([^,\s]+) addvar:REMOTE_ADDR=$1
log-x-forwarded-for = true

# Scaling
processes = $(MS_NUM_PROCESSES)
threads = $(MS_NUM_THREADS)

# Create 1 offload thread per process
offload-threads = 1

# Enable spooler; store spool files inside the data directory
spooler = $(MS_DATA_DIR)/spooler
spooler-processes = $(MS_NUM_SPOOLER_PROCESSES)
# Scan for pending tasks every 5 seconds
spooler-frequency = 5
# Registers timers early
python-import = matshare.uwsgi_signals

# Cache for mapping repo+authorization header to the content of MS_GIT_AUTH
# Max keysize = 20 study course + 20 term + 20 type + 150 lecture + 200 Authorization header + 4 delimiters = 414
# Max blocksize = 150 username + 1 delimiter + JSON git config
cache2 = name=git_auth,items=1000,keysize=500,blocksize=4096

# We only have a single app and take out complexity by disabling multi-interpreter mode
single-interpreter = true

# Specify the path to the virtualenv poetry installed MatShare to
home = .venv

# Mount MatShare to the webserver's root
mount = /=matshare.wsgi:application

# Serve static files at /static/ unless manual hosting was chosen
if-not-env = MS_STATIC_URL
static-map = /static/=static
endif =

# Don't bother MatShare with password hashing when repo authorization is cached
route = ^/git/([A-Za-z0-9_-]{1,20}/[A-Za-z0-9_-]{1,20}/[A-Za-z0-9_-]{1,20}/[A-Za-z0-9_-]{1,150})/.*$ addvar:GIT_REPO=$1
route-if = empty:${GIT_REPO} goto:skip_cached_git_offload
route-if = empty:${HTTP_AUTHORIZATION} goto:skip_cached_git_offload
# This key will also be used in the response chain when storing auth data to the cache
route-run = addvar:GIT_CACHE_KEY=${GIT_REPO}:${HTTP_AUTHORIZATION}
# Reject Authorization headers that would cause the max cache key size to be exceeded
# with 413 Request Entity Too Large
route-if = re:${GIT_CACHE_KEY};^.{501,} return:413
# Fetch authorization info from cache
route-run = cachevar:name=git_auth,key=${GIT_CACHE_KEY},var=MS_GIT_AUTH
route-if = empty:${MS_GIT_AUTH} goto:skip_cached_git_offload
# route-run = log:git repo ${GIT_REPO} authorized via cache: ${MS_GIT_AUTH}
# Strip leading /git from PATH_INFO because the repo server hosts the repos directory in /
route = ^/git(/.*)$ rewrite:$1
# And forward to other uWSGI instance gently providing git-http-backend to us
route-run = uwsgi:uwsgi-git.sock,0,0
route-label = skip_cached_git_offload

# MatShare sets this header if the request should be offloaded to git-http-backend
collect-header = MS-Git-Auth MS_GIT_AUTH
response-route-if = empty:${MS_GIT_AUTH} goto:skip_git_offload
# GIT_CACHE_KEY should have been set in request chain since MatShare only writes
# the MS-Git-Auth header for valid repos, but let's check it for consistency anyway
response-route-if = empty:${GIT_CACHE_KEY} goto:skip_git_offload
# response-route-run = log:git repo ${GIT_REPO} authorized via matshare: ${MS_GIT_AUTH}
# Drop the Django-generated headers
response-route-run = disableheaders:
# Strip leading /git from PATH_INFO because the repo server hosts the repos directory in /
response-route = ^/git(/.*)$ rewrite:$1
# Cache authorization for subsequent requests within 5 minutes
response-route-run = cacheset:name=git_auth,key=${GIT_CACHE_KEY},value=${MS_GIT_AUTH},expires=300
# And forward to other uWSGI instance gently providing git-http-backend to us
response-route-run = uwsgi:uwsgi-git.sock,0,0
response-route-label = skip_git_offload
