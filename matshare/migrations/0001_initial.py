# Generated by Django 3.0.9 on 2020-08-12 12:48

import datetime
from django.conf import settings
import django.contrib.postgres.constraints
import django.contrib.postgres.fields.jsonb
import django.contrib.postgres.fields.ranges
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import django.utils.crypto
from django.utils.timezone import utc
import django.utils.timezone
import django_flexquery.q
import functools
import matshare.models
import matshare.utils
import re
import rules.contrib.models
import timezone_field.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        help_text="Required. An unique, unchangeable identifier for the user account, 50 characters or fewer.",
                        max_length=50,
                        unique=True,
                        verbose_name="username",
                    ),
                ),
                (
                    "email",
                    models.EmailField(max_length=254, verbose_name="email address"),
                ),
                (
                    "first_name",
                    models.CharField(max_length=50, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=50, verbose_name="last name"),
                ),
                (
                    "language",
                    models.CharField(
                        blank=True,
                        choices=[("de", "German"), ("en", "English")],
                        max_length=10,
                        null=True,
                        verbose_name="preferred language",
                    ),
                ),
                (
                    "time_zone",
                    timezone_field.fields.TimeZoneField(
                        default=matshare.models._get_default_user_time_zone,
                        help_text="All dates on the website and in e-mails sent to you will be displayed in this time zone.",
                        verbose_name="preferred time zone",
                    ),
                ),
                (
                    "default_material_notification_frequency",
                    matshare.utils.IntegerEnumField(
                        matshare.models.NotificationFrequency,
                        default=300,
                        help_text="How often to send notification mails about new material at most. This only affects courses you subscribe to in the future.",
                        verbose_name="default e-mail notification frequency for new material",
                    ),
                ),
                (
                    "sources_notification_frequency",
                    matshare.utils.IntegerEnumField(
                        matshare.models.NotificationFrequency,
                        default=100,
                        help_text="How often to send notification mails about new sources to edit at most.",
                        verbose_name="e-mail notification frequency for new sources",
                    ),
                ),
                (
                    "feed_token",
                    models.CharField(
                        default=functools.partial(
                            django.utils.crypto.get_random_string, *(20,), **{}
                        ),
                        max_length=20,
                    ),
                ),
                ("password_reset_token", models.CharField(blank=True, max_length=20)),
                (
                    "password_reset_expiration_date",
                    models.DateTimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0, tzinfo=utc)
                    ),
                ),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
            managers=[("objects", matshare.models.UserManager()),],
        ),
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "slug",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="A short representation of alphanumerics and dashes for use in URLs. No more than 150 characters long. Leave blank to get an auto-generated one.",
                        max_length=150,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                "invalid",
                            )
                        ],
                        verbose_name="slug",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Required. A human-readable name to identify this course. Maximum 150 characters long.",
                        max_length=150,
                        verbose_name="name",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "editing_status",
                    matshare.utils.IntegerEnumField(
                        matshare.models.Course.EditingStatus,
                        default=100,
                        verbose_name="editing status",
                    ),
                ),
                (
                    "internal_reference",
                    models.CharField(
                        blank=True,
                        help_text="Optional. An internal reference, such as an ID of the course in another system.",
                        max_length=150,
                        verbose_name="internal reference",
                    ),
                ),
                (
                    "metadata_audience",
                    matshare.utils.IntegerEnumField(
                        matshare.models.Course.Audience,
                        default=100,
                        help_text="Who can see this course (and its metadata) in the course directory.",
                        verbose_name="visibility",
                    ),
                ),
                (
                    "material_audience",
                    matshare.utils.IntegerEnumField(
                        matshare.models.Course.Audience,
                        default=400,
                        help_text="Who is able to view and download material.",
                        verbose_name="access to material",
                    ),
                ),
                (
                    "doi",
                    models.CharField(
                        blank=True,
                        help_text='Digital Object Identifier, starts with "10.".',
                        max_length=1000,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^10\\.\\d{4,9}/[-._;()/:A-Za-z0-9]+$"
                            )
                        ],
                        verbose_name="DOI",
                    ),
                ),
                (
                    "isbn",
                    matshare.utils.ISBNField(
                        blank=True,
                        help_text="International Standard Book Number",
                        max_length=13,
                    ),
                ),
                (
                    "author",
                    models.CharField(blank=True, max_length=300, verbose_name="author"),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[("de", "German"), ("en", "English"), ("fr", "French")],
                        default="en",
                        help_text="The primary language of the material.",
                        max_length=2,
                        verbose_name="language",
                    ),
                ),
                (
                    "publisher",
                    models.CharField(
                        blank=True,
                        default=matshare.models._get_default_course_publisher,
                        max_length=300,
                        verbose_name="publisher",
                    ),
                ),
                (
                    "source_format",
                    models.CharField(
                        blank=True,
                        help_text="The format of sources provided by the author, such as PDF or PowerPoint.",
                        max_length=150,
                        verbose_name="source format",
                    ),
                ),
                ("is_static", models.BooleanField(default=False)),
                (
                    "magsbs_appendix_prefix",
                    models.BooleanField(
                        default=False, verbose_name="use appendix prefix"
                    ),
                ),
                (
                    "magsbs_generate_toc",
                    models.BooleanField(
                        default=True, verbose_name="generate table of contents"
                    ),
                ),
                (
                    "magsbs_page_numbering_gap",
                    models.PositiveSmallIntegerField(
                        default=5,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="page numbering gap",
                    ),
                ),
                (
                    "magsbs_toc_depth",
                    models.PositiveSmallIntegerField(
                        default=5,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="depth of table of contents",
                    ),
                ),
                (
                    "material_revision",
                    models.CharField(
                        blank=True,
                        max_length=64,
                        verbose_name="latest revision of edit directory",
                    ),
                ),
                (
                    "material_updated_last",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="material updated last"
                    ),
                ),
                (
                    "sources_revision",
                    models.CharField(
                        blank=True,
                        max_length=64,
                        verbose_name="latest revision of sources directory",
                    ),
                ),
                (
                    "sources_updated_last",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="sources updated last"
                    ),
                ),
            ],
            options={"verbose_name": "course", "verbose_name_plural": "courses",},
            bases=(
                matshare.models._SlugModelMixin,
                rules.contrib.models.RulesModelMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="CourseEditorSubscription",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("last_notified_revision", models.CharField(max_length=40, null=True)),
                ("needs_notification", models.BooleanField(default=True)),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="CourseStudentSubscription",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "access_level",
                    matshare.utils.IntegerEnumField(
                        matshare.models.Course.AccessLevel,
                        default=300,
                        exclude=(100, 200),
                        verbose_name="access level",
                    ),
                ),
                (
                    "notification_frequency",
                    matshare.utils.IntegerEnumField(
                        matshare.models.NotificationFrequency,
                        help_text="How often notification mails about new material should be sent at most.",
                        verbose_name="e-mail notification frequency",
                    ),
                ),
                (
                    "last_downloaded_revisions",
                    django.contrib.postgres.fields.jsonb.JSONField(default=dict),
                ),
                (
                    "last_notified_revisions",
                    django.contrib.postgres.fields.jsonb.JSONField(default=dict),
                ),
                ("needs_notification", models.BooleanField(default=True)),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="CourseType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "slug",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="A short representation of alphanumerics and dashes for use in URLs. No more than 20 characters long. Leave blank to get an auto-generated one.",
                        max_length=20,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                "invalid",
                            )
                        ],
                        verbose_name="slug",
                    ),
                ),
                ("name", models.CharField(max_length=150, verbose_name="name")),
            ],
            options={
                "verbose_name": "course type",
                "verbose_name_plural": "course types",
            },
            bases=(
                matshare.models._SlugModelMixin,
                rules.contrib.models.RulesModelMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="EasyAccess",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "token",
                    models.CharField(
                        default=functools.partial(
                            django.utils.crypto.get_random_string, *(20,), **{}
                        ),
                        max_length=20,
                        unique=True,
                        verbose_name="token",
                    ),
                ),
                (
                    "access_level",
                    matshare.utils.IntegerEnumField(
                        matshare.models.Course.AccessLevel,
                        default=300,
                        exclude=(100,),
                        help_text="The level of access granted when using this EasyAccess link.",
                        verbose_name="access level",
                    ),
                ),
                (
                    "expiration_date",
                    models.DateField(
                        default=matshare.models._get_default_easy_access_token_expiration_date,
                        help_text="The URL won't be usable after this date.",
                        verbose_name="expiration date",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the person this token is for, i.e. for commit messages.",
                        max_length=150,
                        verbose_name="name",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="E-mail address of the person who will be using this link.",
                        max_length=254,
                        verbose_name="e-mail address",
                    ),
                ),
            ],
            options={
                "verbose_name": "EasyAccess token",
                "verbose_name_plural": "EasyAccess tokens",
            },
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="MaterialBuild",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("revision", models.CharField(max_length=40, verbose_name="revision")),
                (
                    "format",
                    matshare.utils.IntegerEnumField(
                        matshare.models.MaterialBuild.Format, verbose_name="format"
                    ),
                ),
                (
                    "status",
                    matshare.utils.IntegerEnumField(
                        matshare.models.MaterialBuild.Status,
                        default=100,
                        verbose_name="status",
                    ),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, verbose_name="error message"),
                ),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                ("date_done", models.DateTimeField(null=True, verbose_name="done")),
            ],
            options={
                "verbose_name": "material build",
                "verbose_name_plural": "material builds",
            },
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="StudyCourse",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "slug",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="A short representation of alphanumerics and dashes for use in URLs. No more than 50 characters long. Leave blank to get an auto-generated one.",
                        max_length=50,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                "invalid",
                            )
                        ],
                        verbose_name="slug",
                    ),
                ),
                ("name", models.CharField(max_length=150, verbose_name="name")),
            ],
            options={
                "verbose_name": "course of study",
                "verbose_name_plural": "courses of study",
            },
            bases=(
                matshare.models._SlugModelMixin,
                rules.contrib.models.RulesModelMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="SubCourseRelation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Term",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "slug",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="A short representation of alphanumerics and dashes for use in URLs. No more than 20 characters long. Leave blank to get an auto-generated one.",
                        max_length=20,
                        unique=True,
                        validators=[
                            django.core.validators.MinLengthValidator(3),
                            django.core.validators.RegexValidator(
                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                "invalid",
                            ),
                        ],
                        verbose_name="slug",
                    ),
                ),
                ("name", models.CharField(max_length=150, verbose_name="name")),
                ("start_date", models.DateField(verbose_name="start date")),
                ("end_date", models.DateField(verbose_name="end date")),
            ],
            options={
                "verbose_name": "term",
                "verbose_name_plural": "terms",
                "ordering": ("-start_date",),
            },
            bases=(
                matshare.models._SlugModelMixin,
                rules.contrib.models.RulesModelMixin,
                models.Model,
            ),
        ),
        migrations.AddConstraint(
            model_name="term",
            constraint=django.contrib.postgres.constraints.ExclusionConstraint(
                expressions=(
                    (
                        matshare.models.DateRange(
                            "start_date",
                            "end_date",
                            django.contrib.postgres.fields.ranges.RangeBoundary(
                                inclusive_lower=True, inclusive_upper=True
                            ),
                        ),
                        "&&",
                    ),
                ),
                name="matshare_term_no_overlapping",
            ),
        ),
        migrations.AddField(
            model_name="subcourserelation",
            name="sub_course",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="relations_to_super_courses",
                to="matshare.Course",
                verbose_name="sub-course",
            ),
        ),
        migrations.AddField(
            model_name="subcourserelation",
            name="super_course",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="relations_to_sub_courses",
                to="matshare.Course",
                verbose_name="super-course",
            ),
        ),
        migrations.AddField(
            model_name="materialbuild",
            name="course",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="material_builds",
                to="matshare.Course",
                verbose_name="course",
            ),
        ),
        migrations.AddField(
            model_name="easyaccess",
            name="course",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="easy_accesses",
                to="matshare.Course",
                verbose_name="course",
            ),
        ),
        migrations.AddField(
            model_name="coursestudentsubscription",
            name="course",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="student_subscriptions",
                to="matshare.Course",
                verbose_name="course",
            ),
        ),
        migrations.AddField(
            model_name="coursestudentsubscription",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="student_subscriptions",
                to=settings.AUTH_USER_MODEL,
                verbose_name="user",
            ),
        ),
        migrations.AddField(
            model_name="courseeditorsubscription",
            name="course",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="editor_subscriptions",
                to="matshare.Course",
                verbose_name="course",
            ),
        ),
        migrations.AddField(
            model_name="courseeditorsubscription",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="editor_subscriptions",
                to=settings.AUTH_USER_MODEL,
                verbose_name="user",
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="creator",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
                verbose_name="creator",
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="editors",
            field=models.ManyToManyField(
                related_name="edited_courses",
                through="matshare.CourseEditorSubscription",
                to=settings.AUTH_USER_MODEL,
                verbose_name="editors",
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="students",
            field=models.ManyToManyField(
                related_name="subscribed_courses",
                through="matshare.CourseStudentSubscription",
                to=settings.AUTH_USER_MODEL,
                verbose_name="students",
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="study_course",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="courses",
                to="matshare.StudyCourse",
                verbose_name="course of study",
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="sub_courses",
            field=models.ManyToManyField(
                blank=True,
                related_name="super_courses",
                through="matshare.SubCourseRelation",
                to="matshare.Course",
                verbose_name="sub courses",
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="term",
            field=models.ForeignKey(
                blank=True,
                help_text="The term the course is held in, if it's related to a term at all.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="matshare.Term",
                verbose_name="term",
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="matshare.CourseType",
                verbose_name="type",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="study_courses",
            field=models.ManyToManyField(
                blank=True,
                help_text="The courses of study this user is matriculated to, if any.",
                related_name="students",
                to="matshare.StudyCourse",
                verbose_name="courses of study",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AddConstraint(
            model_name="subcourserelation",
            constraint=models.CheckConstraint(
                check=django_flexquery.q.Q(
                    _negated=True,
                    sub_course=django.db.models.expressions.F("super_course"),
                ),
                name="matshare_subcourserelation_no_self_relation",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="subcourserelation", unique_together={("super_course", "sub_course")},
        ),
        migrations.AlterUniqueTogether(
            name="materialbuild", unique_together={("course", "format", "revision")},
        ),
        migrations.AlterUniqueTogether(
            name="coursestudentsubscription", unique_together={("course", "user")},
        ),
        migrations.AlterUniqueTogether(
            name="courseeditorsubscription", unique_together={("course", "user")},
        ),
        migrations.AddConstraint(
            model_name="course",
            constraint=models.UniqueConstraint(
                fields=("study_course", "term", "type", "slug"),
                name="matshare_course_unique_with_term",
            ),
        ),
        migrations.AddConstraint(
            model_name="course",
            constraint=models.UniqueConstraint(
                condition=django_flexquery.q.Q(term=None),
                fields=("study_course", "type", "slug"),
                name="matshare_course_unique_without_term",
            ),
        ),
        migrations.AddConstraint(
            model_name="course",
            constraint=models.CheckConstraint(
                check=django_flexquery.q.Q(
                    ("is_static", False),
                    django_flexquery.q.Q(
                        ("material_revision", ""), ("sources_revision", "")
                    ),
                    _connector="OR",
                ),
                name="matshare_course_is_static_coherency",
            ),
        ),
        migrations.AlterIndexTogether(
            name="course", index_together={("study_course", "term", "type", "slug")},
        ),
    ]
